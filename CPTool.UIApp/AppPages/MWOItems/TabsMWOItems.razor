@page "/mwo-items/{MWOId:int}"
@using CPTool.UIApp.AppPages.ControlLoops;
@using CPTool.UIApp.AppPages.PurchaseOrders;
@using CPTool.UIApp.AppPages.Signals;
@using CPTool.UIApp.AppPages.UserRequirments;

<CascadingValue Value="this">
    <RadzenTabs Change=@OnChange TabPosition="@tabPosition" RenderMode="TabRenderMode.Client">

        <Tabs>
            <RadzenTabsItem Text="Budget">
                <MWOItemsListBudget @ref=budget MWOId="@MWOId"></MWOItemsListBudget>
            </RadzenTabsItem>
            <RadzenTabsItem Text="List">
                <MWOItemsList @ref=list MWOId="@MWOId"></MWOItemsList>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Purchase Orders">
                <PurchaseOrderList @ref=purchaseorders MWOId="@MWOId"></PurchaseOrderList>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Signals">
                <SignalsList @ref=signals MWOId="@MWOId"></SignalsList>
            </RadzenTabsItem>
            <RadzenTabsItem Text="Control Loops">
                <ControlLoopsList @ref=controls MWOId="@MWOId"></ControlLoopsList>
            </RadzenTabsItem>
            <RadzenTabsItem Text="User Requirements">
                <UserRequirmentsList @ref=UserRequirments MWOId="@MWOId"></UserRequirmentsList>
            </RadzenTabsItem>
            
        </Tabs>
    </RadzenTabs>
</CascadingValue>
@code {
    TabPosition tabPosition = TabPosition.Top;
    MWOItemsListBudget budget;
    MWOItemsList list;
    PurchaseOrderList purchaseorders;
    SignalsList signals;
    ControlLoopsList controls;
    UserRequirmentsList UserRequirments;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await OnChange(0);
    }
    async Task OnChange(int index)
    {
        CurrentTab = index;
        switch (index)
        {
            case 0:
                await budget.UpdateTable();
                break;
            case 1:
                await list.UpdateTable();
                break;
            case 2:
                await purchaseorders.UpdateTable();
                break;
            case 3:
                await  signals.UpdateTable();
                break;
            case 4:
                await controls.UpdateTable();
                break;
            case 5:
              await  UserRequirments.UpdateTable();
                break;

        }
        StateHasChanged();
    }
    [Parameter]
    public int MWOId { get; set; }
    public int CurrentTab = 0;

    public async Task UpdateTables()
    {
        await OnChange(CurrentTab);
    }
}
