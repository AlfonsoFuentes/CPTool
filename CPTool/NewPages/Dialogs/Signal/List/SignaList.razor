@page "/SignaList/{MWOId:int}"
@using CPTool.Application.Features.SignalsFeatures.CreateEdit



<MudGrid>
    <MudItem xs="12" sm="12">
        <MudPaper Height="32px" Width="100%" Square="true">

            <MudText Align="Align.Center" Typo="Typo.h5">Electronical Signals for <b>@MWO.Name</b> </MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12">


        <MudTable @ref="mudTable"
                  Filter="new Func<EditSignal,bool>(FilterFunc1)"
                  Hover="true" Breakpoint="Breakpoint.Sm" Height="500px" FixedHeader="true"
                  Items="@MWOSignals"
                  GroupBy="@_groupDefinition"
                  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)"
                  GroupFooterClass="mb-4"
                  Dense="_dense"
                  MultiSelection="_multiSelect">
            <ToolBarContent>
                <ToolBarComponent ShowAddButton=true
                                  DisableEditButton=false
                                  DisableAddButton=false
                                  ShowDeleteButton=true
                                  OnAdd="AddSignal"
                                  OnDelete="DeleteSignal"
                                  OnEdit="EditSignal">

                </ToolBarComponent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString1"
                              Placeholder="Search"
                              Adornment="Adornment.Start"
                              Immediate="true"
                              AdornmentIcon="@Icons.Material.Filled.Search"
                              IconSize="Size.Medium"
                              Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Name</MudTh>
                <MudTh>Type</MudTh>
                <MudTh>I/O</MudTh>
                <MudTh>Location</MudTh>

            </HeaderContent>
            <GroupHeaderTemplate>
                <MudTh Class="mud-table-cell-custom-group" colspan="6">@($"{context.GroupName}: {context.Key}")</MudTh>
                </GroupHeaderTemplate>
                <RowTemplate>
                    <MudTd DataLabel="#">@context.Id</MudTd>
                    <MudTd DataLabel="Nr">@context.Name</MudTd>
                    <MudTd DataLabel="Sign">@context.SignalType</MudTd>
                    <MudTd DataLabel="I/O">@context.IOType.ToString()</MudTd>
                    <MudTd DataLabel="Location">@context.FieldLocation.Name</MudTd>


                </RowTemplate>
                <GroupFooterTemplate>
                    <MudTh Class="mud-table-cell-custom-group mud-table-cell-custom-group-footer" colspan="6">Total Signals: @context.Items.Count((e) => e.Id!=0)</MudTh>
                </GroupFooterTemplate>
            </MudTable>


            @code {




        }
    </MudItem>
</MudGrid>


<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

@code {
    private MudTable<EditSignal> mudTable;
    private bool _dense = true;
    private bool _multiSelect = false;
    private string searchString1 = "";
    private TableGroupDefinition<EditSignal> _groupDefinition = new TableGroupDefinition<EditSignal>()
        {
            GroupName = "Signal Type",
            Indentation = false,
            Expandable = true,
            Selector = (e) => e.SignalType,
            InnerGroup = new TableGroupDefinition<EditSignal>()
            {
                GroupName = "I/O Type",
                Expandable = true,
                Selector = (e) => e.IOType
            }

        };
    private bool FilterFunc1(EditSignal element) => FilterFunc(element, searchString1);
    private bool FilterFunc(EditSignal element, string searchString)
    {
        var retorno = SearchFunc.Invoke(element, searchString);///* SearchFunc == null ?*/ element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) /*: SearchFunc.Invoke(element, searchString)*/;
        return retorno;


    }

    public Func<EditSignal, string, bool> SearchFunc => getSignallist.FilterFunc;
}