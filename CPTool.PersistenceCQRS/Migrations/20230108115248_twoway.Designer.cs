// <auto-generated />
using System;
using CPToolCQRS.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CPTool.PersistenceCQRS.Migrations
{
    [DbContext(typeof(TableContext))]
    [Migration("20230108115248_twoway")]
    partial class twoway
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CPTool.Domain.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandType")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.BrandSupplier", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BrandSuppliers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Letter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ControlLoop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionType")
                        .HasColumnType("int");

                    b.Property<string>("AlarmText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ControlLoopType")
                        .HasColumnType("int");

                    b.Property<int?>("ControlledVariableId")
                        .HasColumnType("int");

                    b.Property<double>("ControlledVariableMax")
                        .HasColumnType("float");

                    b.Property<double>("ControlledVariableMin")
                        .HasColumnType("float");

                    b.Property<double>("ControlledVariableValue")
                        .HasColumnType("float");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("DTerm")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FailType")
                        .HasColumnType("int");

                    b.Property<double>("ITerm")
                        .HasColumnType("float");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<bool>("ManualOverride")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PTerm")
                        .HasColumnType("float");

                    b.Property<double>("PVRange")
                        .HasColumnType("float");

                    b.Property<int?>("ProcessVariableId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessVariableMaxId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessVariableMinId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessVariableValueId")
                        .HasColumnType("int");

                    b.Property<int?>("SPId")
                        .HasColumnType("int");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("WindupGuard")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ControlledVariableId");

                    b.HasIndex("MWOId");

                    b.HasIndex("ProcessVariableId");

                    b.HasIndex("ProcessVariableMaxId");

                    b.HasIndex("ProcessVariableMinId");

                    b.HasIndex("ProcessVariableValueId");

                    b.HasIndex("SPId");

                    b.ToTable("ControlLoops");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DeviceFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeviceFunctions");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DeviceFunctionModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeviceFunctionModifiers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DownPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CBSRequesNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSRequesText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DownPaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DownPaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownpaymentDescrption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DownpaymentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownpaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Incotherm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payterms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("ProformaInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RealDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("DownPayments");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ElectricalBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ElectricalBoxs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EntityUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EquipmentTypeSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentTypeSubs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.FieldLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FieldLocations");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Gasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Gaskets");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Approved")
                        .HasColumnType("bit");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("CEBName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CECName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Expenses")
                        .HasColumnType("float");

                    b.Property<int?>("MWOTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("ProjectLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MWOTypeId");

                    b.ToTable("MWOs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWOItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Assigned")
                        .HasColumnType("float");

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<bool>("BudgetItem")
                        .HasColumnType("bit");

                    b.Property<double>("BudgetPrize")
                        .HasColumnType("float");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceFunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceFunctionModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("DiameterId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeSubId")
                        .HasColumnType("int");

                    b.Property<bool>("Existing")
                        .HasColumnType("bit");

                    b.Property<int?>("FinishMWOItemId")
                        .HasColumnType("int");

                    b.Property<int?>("InnerMaterialId")
                        .HasColumnType("int");

                    b.Property<bool>("Insulation")
                        .HasColumnType("bit");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialOuterId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomenclatore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NozzleFinishId")
                        .HasColumnType("int");

                    b.Property<int?>("NozzleStartId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PipeClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("ReadoutId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StartMWOItemId")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitaryBasePrizeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("DeviceFunctionId");

                    b.HasIndex("DeviceFunctionModifierId");

                    b.HasIndex("DiameterId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("EquipmentTypeSubId");

                    b.HasIndex("FinishMWOItemId");

                    b.HasIndex("InnerMaterialId");

                    b.HasIndex("MWOId");

                    b.HasIndex("MaterialOuterId");

                    b.HasIndex("MeasuredVariableId");

                    b.HasIndex("MeasuredVariableModifierId");

                    b.HasIndex("NozzleFinishId");

                    b.HasIndex("NozzleStartId");

                    b.HasIndex("PipeClassId");

                    b.HasIndex("ProcessConditionId");

                    b.HasIndex("ProcessFluidId");

                    b.HasIndex("ReadoutId");

                    b.HasIndex("StartMWOItemId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("UnitaryBasePrizeId");

                    b.ToTable("MWOItems");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWOType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MWOTypes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MeasuredVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MeasuredVariables");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MeasuredVariableModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MeasuredVariableModifiers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Nozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConnectedToId")
                        .HasColumnType("int");

                    b.Property<int?>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PipeAccesoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeDiameterId")
                        .HasColumnType("int");

                    b.Property<int>("StreamType")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("nGasketId")
                        .HasColumnType("int");

                    b.Property<int?>("nMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("nPipeClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedToId");

                    b.HasIndex("ConnectionTypeId");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("PipeAccesoryId");

                    b.HasIndex("PipeDiameterId");

                    b.HasIndex("nGasketId");

                    b.HasIndex("nMaterialId");

                    b.HasIndex("nPipeClassId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeAccesory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElevationChangeId")
                        .HasColumnType("int");

                    b.Property<int>("FlowDirection")
                        .HasColumnType("int");

                    b.Property<int?>("FrictionDropPressureId")
                        .HasColumnType("int");

                    b.Property<int?>("FrictionId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelInletId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelOutletId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallDropPressureId")
                        .HasColumnType("int");

                    b.Property<int?>("ReynoldId")
                        .HasColumnType("int");

                    b.Property<int>("SectionType")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("pProcessConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("paDiameterId")
                        .HasColumnType("int");

                    b.Property<int?>("paMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("paPipeClassId")
                        .HasColumnType("int");

                    b.Property<int?>("paProcessFluidId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElevationChangeId");

                    b.HasIndex("FrictionDropPressureId");

                    b.HasIndex("FrictionId");

                    b.HasIndex("LevelInletId");

                    b.HasIndex("LevelOutletId");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("OverallDropPressureId");

                    b.HasIndex("ReynoldId");

                    b.HasIndex("pProcessConditionId");

                    b.HasIndex("paDiameterId");

                    b.HasIndex("paMaterialId");

                    b.HasIndex("paPipeClassId");

                    b.HasIndex("paProcessFluidId");

                    b.ToTable("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PipeClasss");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeDiameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InternalDiameterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OuterDiameterId")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("dPipeClassId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InternalDiameterId");

                    b.HasIndex("OuterDiameterId");

                    b.HasIndex("ThicknessId");

                    b.HasIndex("dPipeClassId");

                    b.ToTable("PipeDiameters");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnthalpyFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("MassFlowId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PressureId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificCpId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificEnthalpyId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ThermalConductivityId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ViscosityId")
                        .HasColumnType("int");

                    b.Property<int?>("VolumetricFlowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DensityId");

                    b.HasIndex("EnthalpyFlowId");

                    b.HasIndex("MassFlowId");

                    b.HasIndex("PressureId");

                    b.HasIndex("SpecificCpId");

                    b.HasIndex("SpecificEnthalpyId");

                    b.HasIndex("TemperatureId");

                    b.HasIndex("ThermalConductivityId");

                    b.HasIndex("ViscosityId");

                    b.HasIndex("VolumetricFlowId");

                    b.ToTable("ProcessConditions");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessFluid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PropertyPackageId")
                        .HasColumnType("int");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PropertyPackageId");

                    b.ToTable("ProcessFluids");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PropertyPackage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PropertyPackages");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PropertySpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecificationId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("SpecificationId");

                    b.ToTable("PropertySpecifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<DateTime>("CurrencyDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("POCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POEstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POInstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("POOrderingdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseOrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseRequisition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("USDCOP")
                        .HasColumnType("float");

                    b.Property<double>("USDEUR")
                        .HasColumnType("float");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("pBrandId")
                        .HasColumnType("int");

                    b.Property<int?>("pSupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MWOId");

                    b.HasIndex("pBrandId");

                    b.HasIndex("pSupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PrizeCurrency")
                        .HasColumnType("float");

                    b.Property<double>("PrizeCurrencyTax")
                        .HasColumnType("float");

                    b.Property<double>("PrizeUSD")
                        .HasColumnType("float");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Readout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Readouts");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Signal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Disconect")
                        .HasColumnType("bit");

                    b.Property<int?>("ElectricalBoxId")
                        .HasColumnType("int");

                    b.Property<int?>("FieldLocationId")
                        .HasColumnType("int");

                    b.Property<bool>("FrequencyInverter")
                        .HasColumnType("bit");

                    b.Property<int>("IOType")
                        .HasColumnType("int");

                    b.Property<bool>("InstrumentAir")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWired")
                        .HasColumnType("bit");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SignalModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("SignalTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WireId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElectricalBoxId");

                    b.HasIndex("FieldLocationId");

                    b.HasIndex("MWOId");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("SignalModifierId");

                    b.HasIndex("SignalTypeId");

                    b.HasIndex("WireId");

                    b.ToTable("Signals");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.SignalModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignalModifiers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.SignalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SignalTypes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Specification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceFunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceFunctionModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeSubId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReadoutId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DeviceFunctionId");

                    b.HasIndex("DeviceFunctionModifierId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("EquipmentTypeSubId");

                    b.HasIndex("MeasuredVariableId");

                    b.HasIndex("MeasuredVariableModifierId");

                    b.HasIndex("ReadoutId");

                    b.ToTable("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxCodeLDId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeLPId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VendorCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TaxCodeLDId");

                    b.HasIndex("TaxCodeLPId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Taks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DownpaymentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpectedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("TaksStatus")
                        .HasColumnType("int");

                    b.Property<int>("TaksType")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DownpaymentId");

                    b.HasIndex("MWOId");

                    b.HasIndex("MWOItemId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("Takss");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.TaxCodeLD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLDs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.TaxCodeLP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLPs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UnitaryBasePrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UnitaryBasePrizes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobilPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UserRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RequestedById")
                        .HasColumnType("int");

                    b.Property<int?>("RequestedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserRequirementTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MWOId");

                    b.HasIndex("RequestedById");

                    b.HasIndex("UserRequirementTypeId");

                    b.ToTable("UserRequirements");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UserRequirementType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserRequirementTypes");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Wire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Wires");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.BrandSupplier", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.Brand", "Brand")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Domain.Entities.Supplier", "Supplier")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ControlLoop", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.Signal", "ControlledVariable")
                        .WithMany("ControlledVariables")
                        .HasForeignKey("ControlledVariableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("ControlLoops")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.Signal", "ProcessVariable")
                        .WithMany("ProcessVariables")
                        .HasForeignKey("ProcessVariableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "ProcessVariableMax")
                        .WithMany("ProcessVariableMaxs")
                        .HasForeignKey("ProcessVariableMaxId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "ProcessVariableMin")
                        .WithMany("ProcessVariableMins")
                        .HasForeignKey("ProcessVariableMinId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "ProcessVariableValue")
                        .WithMany("ProcessVariableValues")
                        .HasForeignKey("ProcessVariableValueId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "SP")
                        .WithMany("SPs")
                        .HasForeignKey("SPId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ControlledVariable");

                    b.Navigation("MWO");

                    b.Navigation("ProcessVariable");

                    b.Navigation("ProcessVariableMax");

                    b.Navigation("ProcessVariableMin");

                    b.Navigation("ProcessVariableValue");

                    b.Navigation("SP");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DownPayment", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("DownPayments")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EquipmentTypeSub", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentTypeSubs")
                        .HasForeignKey("EquipmentTypeId");

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWO", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWOType", "MWOType")
                        .WithMany("MWOs")
                        .HasForeignKey("MWOTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MWOType");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWOItem", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.Brand", "Brand")
                        .WithMany("MWOItems")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Chapter", "Chapter")
                        .WithMany("MWOItems")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.DeviceFunction", "DeviceFunction")
                        .WithMany("MWOItems")
                        .HasForeignKey("DeviceFunctionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.DeviceFunctionModifier", "DeviceFunctionModifier")
                        .WithMany("MWOItems")
                        .HasForeignKey("DeviceFunctionModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeDiameter", "Diameter")
                        .WithMany("MWOItems")
                        .HasForeignKey("DiameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EquipmentType", "EquipmentType")
                        .WithMany("MWOItems")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EquipmentTypeSub", "EquipmentTypeSub")
                        .WithMany("MWOItems")
                        .HasForeignKey("EquipmentTypeSubId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "FinishMWOItem")
                        .WithMany("FinishMWOItems")
                        .HasForeignKey("FinishMWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Material", "InnerMaterial")
                        .WithMany("MWOItemInnerMaterials")
                        .HasForeignKey("InnerMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("MWOItems")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.Material", "MaterialOuter")
                        .WithMany("MWOItemOuterMaterials")
                        .HasForeignKey("MaterialOuterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MeasuredVariable", "MeasuredVariable")
                        .WithMany("MWOItems")
                        .HasForeignKey("MeasuredVariableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MeasuredVariableModifier", "MeasuredVariableModifier")
                        .WithMany("MWOItems")
                        .HasForeignKey("MeasuredVariableModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Nozzle", "NozzleFinish")
                        .WithMany("FinishMWOItems")
                        .HasForeignKey("NozzleFinishId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Nozzle", "NozzleStart")
                        .WithMany("StartMWOItems")
                        .HasForeignKey("NozzleStartId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeClass", "PipeClass")
                        .WithMany("MWOItems")
                        .HasForeignKey("PipeClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.ProcessCondition", "ProcessCondition")
                        .WithMany("MWOItems")
                        .HasForeignKey("ProcessConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.ProcessFluid", "ProcessFluid")
                        .WithMany("MWOItems")
                        .HasForeignKey("ProcessFluidId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Readout", "Readout")
                        .WithMany("MWOItems")
                        .HasForeignKey("ReadoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "StartMWOItem")
                        .WithMany("StartMWOItems")
                        .HasForeignKey("StartMWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Supplier", "Supplier")
                        .WithMany("MWOItems")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.UnitaryBasePrize", "UnitaryBasePrize")
                        .WithMany("MWOItems")
                        .HasForeignKey("UnitaryBasePrizeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Brand");

                    b.Navigation("Chapter");

                    b.Navigation("DeviceFunction");

                    b.Navigation("DeviceFunctionModifier");

                    b.Navigation("Diameter");

                    b.Navigation("EquipmentType");

                    b.Navigation("EquipmentTypeSub");

                    b.Navigation("FinishMWOItem");

                    b.Navigation("InnerMaterial");

                    b.Navigation("MWO");

                    b.Navigation("MaterialOuter");

                    b.Navigation("MeasuredVariable");

                    b.Navigation("MeasuredVariableModifier");

                    b.Navigation("NozzleFinish");

                    b.Navigation("NozzleStart");

                    b.Navigation("PipeClass");

                    b.Navigation("ProcessCondition");

                    b.Navigation("ProcessFluid");

                    b.Navigation("Readout");

                    b.Navigation("StartMWOItem");

                    b.Navigation("Supplier");

                    b.Navigation("UnitaryBasePrize");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Nozzle", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWOItem", "ConnectedTo")
                        .WithMany("NozzlesConnecteds")
                        .HasForeignKey("ConnectedToId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.ConnectionType", "ConnectionType")
                        .WithMany("Nozzles")
                        .HasForeignKey("ConnectionTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("Nozzles")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.PipeAccesory", "PipeAccesory")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipeAccesoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeDiameter", "PipeDiameter")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipeDiameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Gasket", "nGasket")
                        .WithMany("Nozzles")
                        .HasForeignKey("nGasketId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Material", "nMaterial")
                        .WithMany("Nozzles")
                        .HasForeignKey("nMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeClass", "nPipeClass")
                        .WithMany("Nozzles")
                        .HasForeignKey("nPipeClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ConnectedTo");

                    b.Navigation("ConnectionType");

                    b.Navigation("MWOItem");

                    b.Navigation("PipeAccesory");

                    b.Navigation("PipeDiameter");

                    b.Navigation("nGasket");

                    b.Navigation("nMaterial");

                    b.Navigation("nPipeClass");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeAccesory", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "ElevationChange")
                        .WithMany("ElevationChangePipeAccesorys")
                        .HasForeignKey("ElevationChangeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "FrictionDropPressure")
                        .WithMany("FrictionDropPressurePipeAccesorys")
                        .HasForeignKey("FrictionDropPressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Friction")
                        .WithMany("FrictionPipeAccesorys")
                        .HasForeignKey("FrictionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "LevelInlet")
                        .WithMany("LevelInletPipeAccesorys")
                        .HasForeignKey("LevelInletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "LevelOutlet")
                        .WithMany("LevelOutletPipeAccesorys")
                        .HasForeignKey("LevelOutletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "OverallDropPressure")
                        .WithMany("OverallDropPressurePipeAccesorys")
                        .HasForeignKey("OverallDropPressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Reynold")
                        .WithMany("ReynoldPipeAccesorys")
                        .HasForeignKey("ReynoldId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.ProcessCondition", "pProcessCondition")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("pProcessConditionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeDiameter", "paDiameter")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("paDiameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Material", "paMaterial")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("paMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeClass", "paPipeClass")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("paPipeClassId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.ProcessFluid", "paProcessFluid")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("paProcessFluidId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ElevationChange");

                    b.Navigation("Friction");

                    b.Navigation("FrictionDropPressure");

                    b.Navigation("LevelInlet");

                    b.Navigation("LevelOutlet");

                    b.Navigation("MWOItem");

                    b.Navigation("OverallDropPressure");

                    b.Navigation("Reynold");

                    b.Navigation("pProcessCondition");

                    b.Navigation("paDiameter");

                    b.Navigation("paMaterial");

                    b.Navigation("paPipeClass");

                    b.Navigation("paProcessFluid");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeDiameter", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "InternalDiameter")
                        .WithMany("IDs")
                        .HasForeignKey("InternalDiameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "OuterDiameter")
                        .WithMany("ODs")
                        .HasForeignKey("OuterDiameterId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Thickness")
                        .WithMany("Thicknesss")
                        .HasForeignKey("ThicknessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PipeClass", "dPipeClass")
                        .WithMany("PipeDiameters")
                        .HasForeignKey("dPipeClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InternalDiameter");

                    b.Navigation("OuterDiameter");

                    b.Navigation("Thickness");

                    b.Navigation("dPipeClass");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessCondition", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Density")
                        .WithMany("Densitys")
                        .HasForeignKey("DensityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "EnthalpyFlow")
                        .WithMany("EnthalpyFlows")
                        .HasForeignKey("EnthalpyFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "MassFlow")
                        .WithMany("MassFlows")
                        .HasForeignKey("MassFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Pressure")
                        .WithMany("Pressures")
                        .HasForeignKey("PressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "SpecificCp")
                        .WithMany("SpecificCps")
                        .HasForeignKey("SpecificCpId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "SpecificEnthalpy")
                        .WithMany("SpecificEnthalpys")
                        .HasForeignKey("SpecificEnthalpyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Temperature")
                        .WithMany("Temperatures")
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "ThermalConductivity")
                        .WithMany("ThermalConductivitys")
                        .HasForeignKey("ThermalConductivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "Viscosity")
                        .WithMany("Viscositys")
                        .HasForeignKey("ViscosityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EntityUnit", "VolumetricFlow")
                        .WithMany("VolumetricFlows")
                        .HasForeignKey("VolumetricFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Density");

                    b.Navigation("EnthalpyFlow");

                    b.Navigation("MassFlow");

                    b.Navigation("Pressure");

                    b.Navigation("SpecificCp");

                    b.Navigation("SpecificEnthalpy");

                    b.Navigation("Temperature");

                    b.Navigation("ThermalConductivity");

                    b.Navigation("Viscosity");

                    b.Navigation("VolumetricFlow");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessFluid", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.PropertyPackage", "PropertyPackage")
                        .WithMany("ProcessFluids")
                        .HasForeignKey("PropertyPackageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("PropertyPackage");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PropertySpecification", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("PropertySpecifications")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.Specification", "Specification")
                        .WithMany("PropertySpecifications")
                        .HasForeignKey("SpecificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MWOItem");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.Brand", "pBrand")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("pBrandId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Supplier", "pSupplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("pSupplierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MWO");

                    b.Navigation("pBrand");

                    b.Navigation("pSupplier");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MWOItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Signal", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.ElectricalBox", "ElectricalBox")
                        .WithMany("Signals")
                        .HasForeignKey("ElectricalBoxId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.FieldLocation", "FieldLocation")
                        .WithMany("Signals")
                        .HasForeignKey("FieldLocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("Signals")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("Signals")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.SignalModifier", "SignalModifier")
                        .WithMany("Signals")
                        .HasForeignKey("SignalModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.SignalType", "SignalType")
                        .WithMany("Signals")
                        .HasForeignKey("SignalTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Wire", "Wire")
                        .WithMany("Signals")
                        .HasForeignKey("WireId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ElectricalBox");

                    b.Navigation("FieldLocation");

                    b.Navigation("MWO");

                    b.Navigation("MWOItem");

                    b.Navigation("SignalModifier");

                    b.Navigation("SignalType");

                    b.Navigation("Wire");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Specification", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.DeviceFunction", "DeviceFunction")
                        .WithMany("Specifications")
                        .HasForeignKey("DeviceFunctionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.DeviceFunctionModifier", "DeviceFunctionModifier")
                        .WithMany("Specifications")
                        .HasForeignKey("DeviceFunctionModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EquipmentType", "EquipmentType")
                        .WithMany("Specifications")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.EquipmentTypeSub", "EquipmentTypeSub")
                        .WithMany("Specifications")
                        .HasForeignKey("EquipmentTypeSubId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MeasuredVariable", "MeasuredVariable")
                        .WithMany("Specifications")
                        .HasForeignKey("MeasuredVariableId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MeasuredVariableModifier", "MeasuredVariableModifier")
                        .WithMany("Specifications")
                        .HasForeignKey("MeasuredVariableModifierId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.Readout", "Readout")
                        .WithMany("Specifications")
                        .HasForeignKey("ReadoutId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DeviceFunction");

                    b.Navigation("DeviceFunctionModifier");

                    b.Navigation("EquipmentType");

                    b.Navigation("EquipmentTypeSub");

                    b.Navigation("MeasuredVariable");

                    b.Navigation("MeasuredVariableModifier");

                    b.Navigation("Readout");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Supplier", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.TaxCodeLD", "TaxCodeLD")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLDId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.TaxCodeLP", "TaxCodeLP")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLPId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("TaxCodeLD");

                    b.Navigation("TaxCodeLP");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Taks", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.DownPayment", "DownPayment")
                        .WithMany("Taks")
                        .HasForeignKey("DownpaymentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("Taks")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.MWOItem", "MWOItem")
                        .WithMany("Taks")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Taks")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DownPayment");

                    b.Navigation("MWO");

                    b.Navigation("MWOItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UserRequirement", b =>
                {
                    b.HasOne("CPTool.Domain.Entities.MWO", "MWO")
                        .WithMany("UserRequirements")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CPTool.Domain.Entities.User", "RequestedBy")
                        .WithMany("UserRequirements")
                        .HasForeignKey("RequestedById")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Domain.Entities.UserRequirementType", "UserRequirementType")
                        .WithMany("UserRequirements")
                        .HasForeignKey("UserRequirementTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("MWO");

                    b.Navigation("RequestedBy");

                    b.Navigation("UserRequirementType");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Brand", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("MWOItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Chapter", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ConnectionType", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DeviceFunction", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DeviceFunctionModifier", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.DownPayment", b =>
                {
                    b.Navigation("Taks");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ElectricalBox", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EntityUnit", b =>
                {
                    b.Navigation("Densitys");

                    b.Navigation("ElevationChangePipeAccesorys");

                    b.Navigation("EnthalpyFlows");

                    b.Navigation("FrictionDropPressurePipeAccesorys");

                    b.Navigation("FrictionPipeAccesorys");

                    b.Navigation("IDs");

                    b.Navigation("LevelInletPipeAccesorys");

                    b.Navigation("LevelOutletPipeAccesorys");

                    b.Navigation("MassFlows");

                    b.Navigation("ODs");

                    b.Navigation("OverallDropPressurePipeAccesorys");

                    b.Navigation("Pressures");

                    b.Navigation("ProcessVariableMaxs");

                    b.Navigation("ProcessVariableMins");

                    b.Navigation("ProcessVariableValues");

                    b.Navigation("ReynoldPipeAccesorys");

                    b.Navigation("SPs");

                    b.Navigation("SpecificCps");

                    b.Navigation("SpecificEnthalpys");

                    b.Navigation("Temperatures");

                    b.Navigation("ThermalConductivitys");

                    b.Navigation("Thicknesss");

                    b.Navigation("Viscositys");

                    b.Navigation("VolumetricFlows");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EquipmentType", b =>
                {
                    b.Navigation("EquipmentTypeSubs");

                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.EquipmentTypeSub", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.FieldLocation", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Gasket", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWO", b =>
                {
                    b.Navigation("ControlLoops");

                    b.Navigation("MWOItems");

                    b.Navigation("PurchaseOrders");

                    b.Navigation("Signals");

                    b.Navigation("Taks");

                    b.Navigation("UserRequirements");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWOItem", b =>
                {
                    b.Navigation("FinishMWOItems");

                    b.Navigation("Nozzles");

                    b.Navigation("NozzlesConnecteds");

                    b.Navigation("PipeAccesorys");

                    b.Navigation("PropertySpecifications");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("Signals");

                    b.Navigation("StartMWOItems");

                    b.Navigation("Taks");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MWOType", b =>
                {
                    b.Navigation("MWOs");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Material", b =>
                {
                    b.Navigation("MWOItemInnerMaterials");

                    b.Navigation("MWOItemOuterMaterials");

                    b.Navigation("Nozzles");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MeasuredVariable", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.MeasuredVariableModifier", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Nozzle", b =>
                {
                    b.Navigation("FinishMWOItems");

                    b.Navigation("StartMWOItems");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeAccesory", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeClass", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Nozzles");

                    b.Navigation("PipeAccesorys");

                    b.Navigation("PipeDiameters");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PipeDiameter", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Nozzles");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessCondition", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.ProcessFluid", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PropertyPackage", b =>
                {
                    b.Navigation("ProcessFluids");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("DownPayments");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("Taks");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Readout", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Signal", b =>
                {
                    b.Navigation("ControlledVariables");

                    b.Navigation("ProcessVariables");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.SignalModifier", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.SignalType", b =>
                {
                    b.Navigation("Signals");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Specification", b =>
                {
                    b.Navigation("PropertySpecifications");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Supplier", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("MWOItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.TaxCodeLD", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.TaxCodeLP", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UnitaryBasePrize", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.User", b =>
                {
                    b.Navigation("UserRequirements");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.UserRequirementType", b =>
                {
                    b.Navigation("UserRequirements");
                });

            modelBuilder.Entity("CPTool.Domain.Entities.Wire", b =>
                {
                    b.Navigation("Signals");
                });
#pragma warning restore 612, 618
        }
    }
}
