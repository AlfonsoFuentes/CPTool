// <auto-generated />
using System;
using CPTool.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CPTool.Context.Migrations
{
    [DbContext(typeof(TableContext))]
    [Migration("20220912233708_VendorsCode")]
    partial class VendorsCode
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CPTool.Entities.AlterationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AlterationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CPTool.Entities.BrandSupplier", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BrandSuppliers");
                });

            modelBuilder.Entity("CPTool.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Letter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("CPTool.Entities.ContingencyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContingencyItems");
                });

            modelBuilder.Entity("CPTool.Entities.EHSItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EHSItems");
                });

            modelBuilder.Entity("CPTool.Entities.ElectricalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ElectricalItems");
                });

            modelBuilder.Entity("CPTool.Entities.EngineeringCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EngineeringCostItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeSubId")
                        .HasColumnType("int");

                    b.Property<int?>("GasketId")
                        .HasColumnType("int");

                    b.Property<int?>("InnerMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OuterMaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("EquipmentTypeSubId");

                    b.HasIndex("GasketId");

                    b.HasIndex("InnerMaterialId");

                    b.HasIndex("OuterMaterialId");

                    b.HasIndex("SupplierId");

                    b.ToTable("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentTypeSubs");
                });

            modelBuilder.Entity("CPTool.Entities.FoundationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FoundationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Gasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Gaskets");
                });

            modelBuilder.Entity("CPTool.Entities.InstrumentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.InsulationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InsulationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CEBName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CECName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MWOTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("ProjectLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MWOTypeId");

                    b.ToTable("MWOs");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlterationItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("BudgetPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("ContingencyItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EHSItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectricalItemId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineeringCostItemId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("FoundationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("InsulationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomenclatore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PaintingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PipingItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RealPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StructuralItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxesItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TestingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitaryBasePrizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitaryPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlterationItemId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContingencyItemId");

                    b.HasIndex("EHSItemId");

                    b.HasIndex("ElectricalItemId");

                    b.HasIndex("EngineeringCostItemId");

                    b.HasIndex("EquipmentItemId");

                    b.HasIndex("FoundationItemId");

                    b.HasIndex("InstrumentItemId");

                    b.HasIndex("InsulationItemId");

                    b.HasIndex("MWOId");

                    b.HasIndex("PaintingItemId");

                    b.HasIndex("PipingItemId");

                    b.HasIndex("StructuralItemId");

                    b.HasIndex("TaxesItemId");

                    b.HasIndex("TestingItemId");

                    b.HasIndex("UnitaryBasePrizeId");

                    b.ToTable("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.MWOType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MWOTypes");
                });

            modelBuilder.Entity("CPTool.Entities.PaintingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaintingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MWOId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MWOId");

                    b.HasIndex("MWOItemId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("CPTool.Entities.StructuralItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StructuralItems");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxCodeLDId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeLPId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxCodeLDId");

                    b.HasIndex("TaxCodeLPId");

                    b.HasIndex("VendorCodeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLDs");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLPs");
                });

            modelBuilder.Entity("CPTool.Entities.TaxesItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxesItems");
                });

            modelBuilder.Entity("CPTool.Entities.TestingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TestingItems");
                });

            modelBuilder.Entity("CPTool.Entities.UnitaryBasePrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UnitaryBasePrizes");
                });

            modelBuilder.Entity("CPTool.Entities.VendorCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VendorCodes");
                });

            modelBuilder.Entity("CPTool.Entities.BrandSupplier", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("CPTool.Entities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("CPTool.Entities.EquipmentTypeSub", "EquipmentTypeSub")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("EquipmentTypeSubId");

                    b.HasOne("CPTool.Entities.Gasket", "Gasket")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("GasketId");

                    b.HasOne("CPTool.Entities.Material", "InnerMaterial")
                        .WithMany("InnerMaterials")
                        .HasForeignKey("InnerMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Material", "OuterMaterial")
                        .WithMany("OuterMaterials")
                        .HasForeignKey("OuterMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Brand");

                    b.Navigation("EquipmentType");

                    b.Navigation("EquipmentTypeSub");

                    b.Navigation("Gasket");

                    b.Navigation("InnerMaterial");

                    b.Navigation("OuterMaterial");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.HasOne("CPTool.Entities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentTypeSubs")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.HasOne("CPTool.Entities.MWOType", "MWOType")
                        .WithMany("MWOs")
                        .HasForeignKey("MWOTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MWOType");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.HasOne("CPTool.Entities.AlterationItem", "AlterationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("AlterationItemId");

                    b.HasOne("CPTool.Entities.Chapter", "Chapter")
                        .WithMany("MWOItems")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Entities.ContingencyItem", "ContingencyItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("ContingencyItemId");

                    b.HasOne("CPTool.Entities.EHSItem", "EHSItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EHSItemId");

                    b.HasOne("CPTool.Entities.ElectricalItem", "ElectricalItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("ElectricalItemId");

                    b.HasOne("CPTool.Entities.EngineeringCostItem", "EngineeringCostItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EngineeringCostItemId");

                    b.HasOne("CPTool.Entities.EquipmentItem", "EquipmentItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EquipmentItemId");

                    b.HasOne("CPTool.Entities.FoundationItem", "FoundationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("FoundationItemId");

                    b.HasOne("CPTool.Entities.InstrumentItem", "InstrumentItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("InstrumentItemId");

                    b.HasOne("CPTool.Entities.InsulationItem", "InsulationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("InsulationItemId");

                    b.HasOne("CPTool.Entities.MWO", "MWO")
                        .WithMany("MWOItems")
                        .HasForeignKey("MWOId");

                    b.HasOne("CPTool.Entities.PaintingItem", "PaintingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("PaintingItemId");

                    b.HasOne("CPTool.Entities.PipingItem", "PipingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("PipingItemId");

                    b.HasOne("CPTool.Entities.StructuralItem", "StructuralItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("StructuralItemId");

                    b.HasOne("CPTool.Entities.TaxesItem", "TaxesItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("TaxesItemId");

                    b.HasOne("CPTool.Entities.TestingItem", "TestingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("TestingItemId");

                    b.HasOne("CPTool.Entities.UnitaryBasePrize", "UnitaryBasePrize")
                        .WithMany("MWOItems")
                        .HasForeignKey("UnitaryBasePrizeId");

                    b.Navigation("AlterationItem");

                    b.Navigation("Chapter");

                    b.Navigation("ContingencyItem");

                    b.Navigation("EHSItem");

                    b.Navigation("ElectricalItem");

                    b.Navigation("EngineeringCostItem");

                    b.Navigation("EquipmentItem");

                    b.Navigation("FoundationItem");

                    b.Navigation("InstrumentItem");

                    b.Navigation("InsulationItem");

                    b.Navigation("MWO");

                    b.Navigation("PaintingItem");

                    b.Navigation("PipingItem");

                    b.Navigation("StructuralItem");

                    b.Navigation("TaxesItem");

                    b.Navigation("TestingItem");

                    b.Navigation("UnitaryBasePrize");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("CPTool.Entities.MWO", "MWO")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("MWOId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Entities.MWOItem", "MWOItem")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("MWOItemId");

                    b.Navigation("MWO");

                    b.Navigation("MWOItem");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrderItem", b =>
                {
                    b.HasOne("CPTool.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.HasOne("CPTool.Entities.TaxCodeLD", "TaxCodeLD")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLDId");

                    b.HasOne("CPTool.Entities.TaxCodeLP", "TaxCodeLP")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLPId");

                    b.HasOne("CPTool.Entities.VendorCode", "VendorCode")
                        .WithMany("Suppliers")
                        .HasForeignKey("VendorCodeId");

                    b.Navigation("TaxCodeLD");

                    b.Navigation("TaxCodeLP");

                    b.Navigation("VendorCode");
                });

            modelBuilder.Entity("CPTool.Entities.AlterationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Brand", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.Chapter", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.ContingencyItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EHSItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.ElectricalItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EngineeringCostItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentType", b =>
                {
                    b.Navigation("EquipmentItems");

                    b.Navigation("EquipmentTypeSubs");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.FoundationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Gasket", b =>
                {
                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.InstrumentItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.InsulationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Material", b =>
                {
                    b.Navigation("InnerMaterials");

                    b.Navigation("OuterMaterials");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.MWOType", b =>
                {
                    b.Navigation("MWOs");
                });

            modelBuilder.Entity("CPTool.Entities.PaintingItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipingItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseOrderItems");
                });

            modelBuilder.Entity("CPTool.Entities.StructuralItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLD", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLP", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxesItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.TestingItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.UnitaryBasePrize", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.VendorCode", b =>
                {
                    b.Navigation("Suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
