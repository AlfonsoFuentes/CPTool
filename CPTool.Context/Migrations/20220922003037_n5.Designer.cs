// <auto-generated />
using System;
using CPTool.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CPTool.Context.Migrations
{
    [DbContext(typeof(TableContext))]
    [Migration("20220922003037_n5")]
    partial class n5
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CPTool.Entities.AlterationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CostCenter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AlterationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("BrandType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CPTool.Entities.BrandSupplier", b =>
                {
                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("BrandId", "SupplierId");

                    b.HasIndex("SupplierId");

                    b.ToTable("BrandSuppliers");
                });

            modelBuilder.Entity("CPTool.Entities.Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Letter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Chapters");
                });

            modelBuilder.Entity("CPTool.Entities.ConnectionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ConnectionTypes");
                });

            modelBuilder.Entity("CPTool.Entities.ContingencyItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ContingencyItems");
                });

            modelBuilder.Entity("CPTool.Entities.DeviceFunction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeviceFunctions");
                });

            modelBuilder.Entity("CPTool.Entities.DeviceFunctionModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("DeviceFunctionModifiers");
                });

            modelBuilder.Entity("CPTool.Entities.DownPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CBSRequesNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CBSRequesText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("DownPaymentAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DownPaymentDueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DownpaymentDescrption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DownpaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Incotherm")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ManagerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Payterms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Percentage")
                        .HasColumnType("float");

                    b.Property<string>("ProformaInvoice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RealDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("DownPayments");
                });

            modelBuilder.Entity("CPTool.Entities.EHSItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EHSItems");
                });

            modelBuilder.Entity("CPTool.Entities.ElectricalItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ElectricalItems");
                });

            modelBuilder.Entity("CPTool.Entities.EngineeringCostItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EngineeringCostItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentTypeSubId")
                        .HasColumnType("int");

                    b.Property<int?>("GasketId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessFluidId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("eInnerMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("eOuterMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("EquipmentTypeId");

                    b.HasIndex("EquipmentTypeSubId");

                    b.HasIndex("GasketId");

                    b.HasIndex("ProcessConditionId");

                    b.HasIndex("ProcessFluidId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("eInnerMaterialId");

                    b.HasIndex("eOuterMaterialId");

                    b.ToTable("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("EquipmentTypes");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EquipmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentTypeId");

                    b.ToTable("EquipmentTypeSubs");
                });

            modelBuilder.Entity("CPTool.Entities.FoundationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FoundationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Gasket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Gaskets");
                });

            modelBuilder.Entity("CPTool.Entities.InstrumentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DeviceFunctionId")
                        .HasColumnType("int");

                    b.Property<int?>("DeviceFunctionModifierId")
                        .HasColumnType("int");

                    b.Property<int?>("GasketId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableId")
                        .HasColumnType("int");

                    b.Property<int?>("MeasuredVariableModifierId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProcessConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("ReadoutId")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<string>("TagId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("iInnerMaterialId")
                        .HasColumnType("int");

                    b.Property<int?>("iOuterMaterialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("DeviceFunctionId");

                    b.HasIndex("DeviceFunctionModifierId");

                    b.HasIndex("GasketId");

                    b.HasIndex("MeasuredVariableId");

                    b.HasIndex("MeasuredVariableModifierId");

                    b.HasIndex("ProcessConditionId");

                    b.HasIndex("ProcessFluidId");

                    b.HasIndex("ReadoutId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("iInnerMaterialId");

                    b.HasIndex("iOuterMaterialId");

                    b.ToTable("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.InsulationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("InsulationItems");
                });

            modelBuilder.Entity("CPTool.Entities.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("CPTool.Entities.MeasuredVariable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MeasuredVariables");
                });

            modelBuilder.Entity("CPTool.Entities.MeasuredVariableModifier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MeasuredVariableModifiers");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CEBName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CECName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MWOTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("ProjectLeader")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MWOTypeId");

                    b.ToTable("MWOs");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlterationItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("BudgetPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ChapterId")
                        .HasColumnType("int");

                    b.Property<int?>("ContingencyItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EHSItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectricalItemId")
                        .HasColumnType("int");

                    b.Property<int?>("EngineeringCostItemId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("FoundationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("InsulationItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nomenclatore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("PaintingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("PipingItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("RealPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StructuralItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxesItemId")
                        .HasColumnType("int");

                    b.Property<int?>("TestingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("UnitaryBasePrizeId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitaryPrize")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AlterationItemId");

                    b.HasIndex("ChapterId");

                    b.HasIndex("ContingencyItemId");

                    b.HasIndex("EHSItemId");

                    b.HasIndex("ElectricalItemId");

                    b.HasIndex("EngineeringCostItemId");

                    b.HasIndex("EquipmentItemId");

                    b.HasIndex("FoundationItemId");

                    b.HasIndex("InstrumentItemId");

                    b.HasIndex("InsulationItemId");

                    b.HasIndex("MWOId");

                    b.HasIndex("PaintingItemId");

                    b.HasIndex("PipingItemId");

                    b.HasIndex("StructuralItemId");

                    b.HasIndex("TaxesItemId");

                    b.HasIndex("TestingItemId");

                    b.HasIndex("UnitaryBasePrizeId");

                    b.ToTable("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.MWOType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MWOTypes");
                });

            modelBuilder.Entity("CPTool.Entities.Nozzle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ConnectionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EquipmentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("GasketId")
                        .HasColumnType("int");

                    b.Property<int?>("InstrumentItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MaterialID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PipeAccesoryId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeClassId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeDiameterId")
                        .HasColumnType("int");

                    b.Property<int?>("PipingItemId")
                        .HasColumnType("int");

                    b.Property<int>("StreamType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionTypeId");

                    b.HasIndex("EquipmentItemId");

                    b.HasIndex("GasketId");

                    b.HasIndex("InstrumentItemId");

                    b.HasIndex("MaterialID");

                    b.HasIndex("PipeAccesoryId");

                    b.HasIndex("PipeClassId");

                    b.HasIndex("PipeDiameterId");

                    b.HasIndex("PipingItemId");

                    b.ToTable("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.PaintingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaintingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipeAccesory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElevationChangeId")
                        .HasColumnType("int");

                    b.Property<int>("FlowDirection")
                        .HasColumnType("int");

                    b.Property<int?>("FrictionDropPressureId")
                        .HasColumnType("int");

                    b.Property<int?>("FrictionId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelInletId")
                        .HasColumnType("int");

                    b.Property<int?>("LevelOutletId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OverallDropPressureId")
                        .HasColumnType("int");

                    b.Property<int?>("PipingItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessConditionId")
                        .HasColumnType("int");

                    b.Property<int?>("ReynoldId")
                        .HasColumnType("int");

                    b.Property<int>("SectionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ElevationChangeId");

                    b.HasIndex("FrictionDropPressureId");

                    b.HasIndex("FrictionId");

                    b.HasIndex("LevelInletId");

                    b.HasIndex("LevelOutletId");

                    b.HasIndex("OverallDropPressureId");

                    b.HasIndex("PipingItemId");

                    b.HasIndex("ProcessConditionId");

                    b.HasIndex("ReynoldId");

                    b.ToTable("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Entities.PipeClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PipeClasss");
                });

            modelBuilder.Entity("CPTool.Entities.PipeDiameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IDId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ODId")
                        .HasColumnType("int");

                    b.Property<int?>("ThicknessId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IDId");

                    b.HasIndex("ODId");

                    b.HasIndex("ThicknessId");

                    b.ToTable("PipeDiameters");
                });

            modelBuilder.Entity("CPTool.Entities.PipingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DiameterId")
                        .HasColumnType("int");

                    b.Property<int?>("FinishMWOItemId")
                        .HasColumnType("int");

                    b.Property<bool>("Insulation")
                        .HasColumnType("bit");

                    b.Property<int?>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NozzleFinishId")
                        .HasColumnType("int");

                    b.Property<int?>("NozzleStartId")
                        .HasColumnType("int");

                    b.Property<int?>("PipeClassId")
                        .HasColumnType("int");

                    b.Property<int?>("ProcessFluidId")
                        .HasColumnType("int");

                    b.Property<int?>("StartMWOItemId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DiameterId");

                    b.HasIndex("FinishMWOItemId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("NozzleFinishId");

                    b.HasIndex("NozzleStartId");

                    b.HasIndex("PipeClassId");

                    b.HasIndex("ProcessFluidId");

                    b.HasIndex("StartMWOItemId");

                    b.ToTable("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.ProcessCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DensityId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EnthalpyFlowId")
                        .HasColumnType("int");

                    b.Property<int?>("MassFlowId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PressureId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificCpId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecificEnthalpyId")
                        .HasColumnType("int");

                    b.Property<int?>("TemperatureId")
                        .HasColumnType("int");

                    b.Property<int?>("ThermalConductivityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ViscosityId")
                        .HasColumnType("int");

                    b.Property<int?>("VolumetricFlowId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DensityId");

                    b.HasIndex("EnthalpyFlowId");

                    b.HasIndex("MassFlowId");

                    b.HasIndex("PressureId");

                    b.HasIndex("SpecificCpId");

                    b.HasIndex("SpecificEnthalpyId");

                    b.HasIndex("TemperatureId");

                    b.HasIndex("ThermalConductivityId");

                    b.HasIndex("ViscosityId");

                    b.HasIndex("VolumetricFlowId");

                    b.ToTable("ProcessConditions");
                });

            modelBuilder.Entity("CPTool.Entities.ProcessFluid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProcessFluids");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MWOId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("POCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POEstimatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POInstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PONumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("POOrderingdDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("POReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("PrizeCurrency")
                        .HasColumnType("float");

                    b.Property<double>("PrizeCurrencyTax")
                        .HasColumnType("float");

                    b.Property<double>("PrizeUSD")
                        .HasColumnType("float");

                    b.Property<int>("PurchaseOrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("PurchaseRequisition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SPL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<double>("Tax")
                        .HasColumnType("float");

                    b.Property<string>("TaxCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalPrizeCurrency")
                        .HasColumnType("float");

                    b.Property<double>("USDCOP")
                        .HasColumnType("float");

                    b.Property<double>("USDEUR")
                        .HasColumnType("float");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("MWOId");

                    b.HasIndex("SupplierId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrderMWOItem", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<int>("MWOItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PurchaseOrderId", "MWOItemId");

                    b.HasIndex("MWOItemId");

                    b.ToTable("PurchaseOrderMWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Readout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TagLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Readouts");
                });

            modelBuilder.Entity("CPTool.Entities.StructuralItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StructuralItems");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaxCodeLDId")
                        .HasColumnType("int");

                    b.Property<int?>("TaxCodeLPId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("VendorCodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxCodeLDId");

                    b.HasIndex("TaxCodeLPId");

                    b.HasIndex("VendorCodeId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLD", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLDs");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxCodeLPs");
                });

            modelBuilder.Entity("CPTool.Entities.TaxesItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaxesItems");
                });

            modelBuilder.Entity("CPTool.Entities.TestingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TestingItems");
                });

            modelBuilder.Entity("CPTool.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnitName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("CPTool.Entities.UnitaryBasePrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UnitaryBasePrizes");
                });

            modelBuilder.Entity("CPTool.Entities.VendorCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("VendorCodes");
                });

            modelBuilder.Entity("CPTool.Entities.BrandSupplier", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("BrandSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CPTool.Entities.DownPayment", b =>
                {
                    b.HasOne("CPTool.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("DownPayments")
                        .HasForeignKey("PurchaseOrderId");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("CPTool.Entities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("EquipmentTypeId");

                    b.HasOne("CPTool.Entities.EquipmentTypeSub", "EquipmentTypeSub")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("EquipmentTypeSubId");

                    b.HasOne("CPTool.Entities.Gasket", "Gasket")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("GasketId");

                    b.HasOne("CPTool.Entities.ProcessCondition", "ProcessCondition")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("ProcessConditionId");

                    b.HasOne("CPTool.Entities.ProcessFluid", "ProcessFluid")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("ProcessFluidId");

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("EquipmentItems")
                        .HasForeignKey("SupplierId");

                    b.HasOne("CPTool.Entities.Material", "eInnerMaterial")
                        .WithMany("EquipmentItemInnerMaterials")
                        .HasForeignKey("eInnerMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Material", "eOuterMaterial")
                        .WithMany("EquipmentItemOuterMaterials")
                        .HasForeignKey("eOuterMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Brand");

                    b.Navigation("EquipmentType");

                    b.Navigation("EquipmentTypeSub");

                    b.Navigation("Gasket");

                    b.Navigation("ProcessCondition");

                    b.Navigation("ProcessFluid");

                    b.Navigation("Supplier");

                    b.Navigation("eInnerMaterial");

                    b.Navigation("eOuterMaterial");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.HasOne("CPTool.Entities.EquipmentType", "EquipmentType")
                        .WithMany("EquipmentTypeSubs")
                        .HasForeignKey("EquipmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentType");
                });

            modelBuilder.Entity("CPTool.Entities.InstrumentItem", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("BrandId");

                    b.HasOne("CPTool.Entities.DeviceFunction", "DeviceFunction")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("DeviceFunctionId");

                    b.HasOne("CPTool.Entities.DeviceFunctionModifier", "DeviceFunctionModifier")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("DeviceFunctionModifierId");

                    b.HasOne("CPTool.Entities.Gasket", "Gasket")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("GasketId");

                    b.HasOne("CPTool.Entities.MeasuredVariable", "MeasuredVariable")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("MeasuredVariableId");

                    b.HasOne("CPTool.Entities.MeasuredVariableModifier", "MeasuredVariableModifier")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("MeasuredVariableModifierId");

                    b.HasOne("CPTool.Entities.ProcessCondition", "ProcessCondition")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("ProcessConditionId");

                    b.HasOne("CPTool.Entities.ProcessFluid", "ProcessFluid")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("ProcessFluidId");

                    b.HasOne("CPTool.Entities.Readout", "Readout")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("ReadoutId");

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("InstrumentItems")
                        .HasForeignKey("SupplierId");

                    b.HasOne("CPTool.Entities.Material", "iInnerMaterial")
                        .WithMany("InstrumentItemInnerMaterials")
                        .HasForeignKey("iInnerMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Material", "iOuterMaterial")
                        .WithMany("InstrumentItemOuterMaterials")
                        .HasForeignKey("iOuterMaterialId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Brand");

                    b.Navigation("DeviceFunction");

                    b.Navigation("DeviceFunctionModifier");

                    b.Navigation("Gasket");

                    b.Navigation("MeasuredVariable");

                    b.Navigation("MeasuredVariableModifier");

                    b.Navigation("ProcessCondition");

                    b.Navigation("ProcessFluid");

                    b.Navigation("Readout");

                    b.Navigation("Supplier");

                    b.Navigation("iInnerMaterial");

                    b.Navigation("iOuterMaterial");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.HasOne("CPTool.Entities.MWOType", "MWOType")
                        .WithMany("MWOs")
                        .HasForeignKey("MWOTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MWOType");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.HasOne("CPTool.Entities.AlterationItem", "AlterationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("AlterationItemId");

                    b.HasOne("CPTool.Entities.Chapter", "Chapter")
                        .WithMany("MWOItems")
                        .HasForeignKey("ChapterId");

                    b.HasOne("CPTool.Entities.ContingencyItem", "ContingencyItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("ContingencyItemId");

                    b.HasOne("CPTool.Entities.EHSItem", "EHSItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EHSItemId");

                    b.HasOne("CPTool.Entities.ElectricalItem", "ElectricalItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("ElectricalItemId");

                    b.HasOne("CPTool.Entities.EngineeringCostItem", "EngineeringCostItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EngineeringCostItemId");

                    b.HasOne("CPTool.Entities.EquipmentItem", "EquipmentItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("EquipmentItemId");

                    b.HasOne("CPTool.Entities.FoundationItem", "FoundationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("FoundationItemId");

                    b.HasOne("CPTool.Entities.InstrumentItem", "InstrumentItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("InstrumentItemId");

                    b.HasOne("CPTool.Entities.InsulationItem", "InsulationItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("InsulationItemId");

                    b.HasOne("CPTool.Entities.MWO", "MWO")
                        .WithMany("MWOItems")
                        .HasForeignKey("MWOId");

                    b.HasOne("CPTool.Entities.PaintingItem", "PaintingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("PaintingItemId");

                    b.HasOne("CPTool.Entities.PipingItem", "PipingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("PipingItemId");

                    b.HasOne("CPTool.Entities.StructuralItem", "StructuralItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("StructuralItemId");

                    b.HasOne("CPTool.Entities.TaxesItem", "TaxesItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("TaxesItemId");

                    b.HasOne("CPTool.Entities.TestingItem", "TestingItem")
                        .WithMany("MWOItems")
                        .HasForeignKey("TestingItemId");

                    b.HasOne("CPTool.Entities.UnitaryBasePrize", "UnitaryBasePrize")
                        .WithMany("MWOItems")
                        .HasForeignKey("UnitaryBasePrizeId");

                    b.Navigation("AlterationItem");

                    b.Navigation("Chapter");

                    b.Navigation("ContingencyItem");

                    b.Navigation("EHSItem");

                    b.Navigation("ElectricalItem");

                    b.Navigation("EngineeringCostItem");

                    b.Navigation("EquipmentItem");

                    b.Navigation("FoundationItem");

                    b.Navigation("InstrumentItem");

                    b.Navigation("InsulationItem");

                    b.Navigation("MWO");

                    b.Navigation("PaintingItem");

                    b.Navigation("PipingItem");

                    b.Navigation("StructuralItem");

                    b.Navigation("TaxesItem");

                    b.Navigation("TestingItem");

                    b.Navigation("UnitaryBasePrize");
                });

            modelBuilder.Entity("CPTool.Entities.Nozzle", b =>
                {
                    b.HasOne("CPTool.Entities.ConnectionType", "ConnectionType")
                        .WithMany("Nozzles")
                        .HasForeignKey("ConnectionTypeId");

                    b.HasOne("CPTool.Entities.EquipmentItem", "EquipmentItem")
                        .WithMany("Nozzles")
                        .HasForeignKey("EquipmentItemId");

                    b.HasOne("CPTool.Entities.Gasket", "Gasket")
                        .WithMany("Nozzles")
                        .HasForeignKey("GasketId");

                    b.HasOne("CPTool.Entities.InstrumentItem", "InstrumentItem")
                        .WithMany("Nozzles")
                        .HasForeignKey("InstrumentItemId");

                    b.HasOne("CPTool.Entities.Material", "Material")
                        .WithMany("Nozzles")
                        .HasForeignKey("MaterialID");

                    b.HasOne("CPTool.Entities.PipeAccesory", "PipeAccesory")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipeAccesoryId");

                    b.HasOne("CPTool.Entities.PipeClass", "PipeClass")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipeClassId");

                    b.HasOne("CPTool.Entities.PipeDiameter", "PipeDiameter")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipeDiameterId");

                    b.HasOne("CPTool.Entities.PipingItem", "PipingItem")
                        .WithMany("Nozzles")
                        .HasForeignKey("PipingItemId");

                    b.Navigation("ConnectionType");

                    b.Navigation("EquipmentItem");

                    b.Navigation("Gasket");

                    b.Navigation("InstrumentItem");

                    b.Navigation("Material");

                    b.Navigation("PipeAccesory");

                    b.Navigation("PipeClass");

                    b.Navigation("PipeDiameter");

                    b.Navigation("PipingItem");
                });

            modelBuilder.Entity("CPTool.Entities.PipeAccesory", b =>
                {
                    b.HasOne("CPTool.Entities.Unit", "ElevationChange")
                        .WithMany("ElevationChangePipeAccesorys")
                        .HasForeignKey("ElevationChangeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "FrictionDropPressure")
                        .WithMany("FrictionDropPressurePipeAccesorys")
                        .HasForeignKey("FrictionDropPressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "Friction")
                        .WithMany("FrictionPipeAccesorys")
                        .HasForeignKey("FrictionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "LevelInlet")
                        .WithMany("LevelInletPipeAccesorys")
                        .HasForeignKey("LevelInletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "LevelOutlet")
                        .WithMany("LevelOutletPipeAccesorys")
                        .HasForeignKey("LevelOutletId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "OverallDropPressure")
                        .WithMany("OverallDropPressurePipeAccesorys")
                        .HasForeignKey("OverallDropPressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.PipingItem", "PipingItem")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("PipingItemId");

                    b.HasOne("CPTool.Entities.ProcessCondition", "ProcessCondition")
                        .WithMany("PipeAccesorys")
                        .HasForeignKey("ProcessConditionId");

                    b.HasOne("CPTool.Entities.Unit", "Reynold")
                        .WithMany("ReynoldPipeAccesorys")
                        .HasForeignKey("ReynoldId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ElevationChange");

                    b.Navigation("Friction");

                    b.Navigation("FrictionDropPressure");

                    b.Navigation("LevelInlet");

                    b.Navigation("LevelOutlet");

                    b.Navigation("OverallDropPressure");

                    b.Navigation("PipingItem");

                    b.Navigation("ProcessCondition");

                    b.Navigation("Reynold");
                });

            modelBuilder.Entity("CPTool.Entities.PipeDiameter", b =>
                {
                    b.HasOne("CPTool.Entities.Unit", "ID")
                        .WithMany("IDs")
                        .HasForeignKey("IDId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "OD")
                        .WithMany("ODs")
                        .HasForeignKey("ODId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "Thickness")
                        .WithMany("Thicknesss")
                        .HasForeignKey("ThicknessId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ID");

                    b.Navigation("OD");

                    b.Navigation("Thickness");
                });

            modelBuilder.Entity("CPTool.Entities.PipingItem", b =>
                {
                    b.HasOne("CPTool.Entities.PipeDiameter", "Diameter")
                        .WithMany("PipingItems")
                        .HasForeignKey("DiameterId");

                    b.HasOne("CPTool.Entities.MWOItem", "FinishMWOItem")
                        .WithMany("FisnishPipingItems")
                        .HasForeignKey("FinishMWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Material", "Material")
                        .WithMany("PipingItems")
                        .HasForeignKey("MaterialId");

                    b.HasOne("CPTool.Entities.Nozzle", "NozzleFinish")
                        .WithMany("FinishPipingItems")
                        .HasForeignKey("NozzleFinishId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Nozzle", "NozzleStart")
                        .WithMany("StartPipingItems")
                        .HasForeignKey("NozzleStartId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.PipeClass", "PipeClass")
                        .WithMany("PipingItems")
                        .HasForeignKey("PipeClassId");

                    b.HasOne("CPTool.Entities.ProcessFluid", "ProcessFluid")
                        .WithMany("PipingItems")
                        .HasForeignKey("ProcessFluidId");

                    b.HasOne("CPTool.Entities.MWOItem", "StartMWOItem")
                        .WithMany("StartPipingItems")
                        .HasForeignKey("StartMWOItemId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Diameter");

                    b.Navigation("FinishMWOItem");

                    b.Navigation("Material");

                    b.Navigation("NozzleFinish");

                    b.Navigation("NozzleStart");

                    b.Navigation("PipeClass");

                    b.Navigation("ProcessFluid");

                    b.Navigation("StartMWOItem");
                });

            modelBuilder.Entity("CPTool.Entities.ProcessCondition", b =>
                {
                    b.HasOne("CPTool.Entities.Unit", "Density")
                        .WithMany("Densitys")
                        .HasForeignKey("DensityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "EnthalpyFlow")
                        .WithMany("EnthalpyFlows")
                        .HasForeignKey("EnthalpyFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "MassFlow")
                        .WithMany("MassFlows")
                        .HasForeignKey("MassFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "Pressure")
                        .WithMany("Pressures")
                        .HasForeignKey("PressureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "SpecificCp")
                        .WithMany("SpecificCps")
                        .HasForeignKey("SpecificCpId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "SpecificEnthalpy")
                        .WithMany("SpecificEnthalpys")
                        .HasForeignKey("SpecificEnthalpyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "Temperature")
                        .WithMany("Temperatures")
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "ThermalConductivity")
                        .WithMany("ThermalConductivitys")
                        .HasForeignKey("ThermalConductivityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "Viscosity")
                        .WithMany("Viscositys")
                        .HasForeignKey("ViscosityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CPTool.Entities.Unit", "VolumetricFlow")
                        .WithMany("VolumetricFlows")
                        .HasForeignKey("VolumetricFlowId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Density");

                    b.Navigation("EnthalpyFlow");

                    b.Navigation("MassFlow");

                    b.Navigation("Pressure");

                    b.Navigation("SpecificCp");

                    b.Navigation("SpecificEnthalpy");

                    b.Navigation("Temperature");

                    b.Navigation("ThermalConductivity");

                    b.Navigation("Viscosity");

                    b.Navigation("VolumetricFlow");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.HasOne("CPTool.Entities.Brand", "Brand")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("BrandId");

                    b.HasOne("CPTool.Entities.MWO", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("MWOId");

                    b.HasOne("CPTool.Entities.Supplier", "Supplier")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("SupplierId");

                    b.Navigation("Brand");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrderMWOItem", b =>
                {
                    b.HasOne("CPTool.Entities.MWOItem", "MWOItem")
                        .WithMany("PurchaseOrderMWOItems")
                        .HasForeignKey("MWOItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CPTool.Entities.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseOrderMWOItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MWOItem");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.HasOne("CPTool.Entities.TaxCodeLD", "TaxCodeLD")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLDId");

                    b.HasOne("CPTool.Entities.TaxCodeLP", "TaxCodeLP")
                        .WithMany("Suppliers")
                        .HasForeignKey("TaxCodeLPId");

                    b.HasOne("CPTool.Entities.VendorCode", "VendorCode")
                        .WithMany("Suppliers")
                        .HasForeignKey("VendorCodeId");

                    b.Navigation("TaxCodeLD");

                    b.Navigation("TaxCodeLP");

                    b.Navigation("VendorCode");
                });

            modelBuilder.Entity("CPTool.Entities.AlterationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Brand", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("EquipmentItems");

                    b.Navigation("InstrumentItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.Chapter", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.ConnectionType", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.ContingencyItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.DeviceFunction", b =>
                {
                    b.Navigation("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.DeviceFunctionModifier", b =>
                {
                    b.Navigation("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.EHSItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.ElectricalItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EngineeringCostItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentItem", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentType", b =>
                {
                    b.Navigation("EquipmentItems");

                    b.Navigation("EquipmentTypeSubs");
                });

            modelBuilder.Entity("CPTool.Entities.EquipmentTypeSub", b =>
                {
                    b.Navigation("EquipmentItems");
                });

            modelBuilder.Entity("CPTool.Entities.FoundationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Gasket", b =>
                {
                    b.Navigation("EquipmentItems");

                    b.Navigation("InstrumentItems");

                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.InstrumentItem", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.InsulationItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Material", b =>
                {
                    b.Navigation("EquipmentItemInnerMaterials");

                    b.Navigation("EquipmentItemOuterMaterials");

                    b.Navigation("InstrumentItemInnerMaterials");

                    b.Navigation("InstrumentItemOuterMaterials");

                    b.Navigation("Nozzles");

                    b.Navigation("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.MeasuredVariable", b =>
                {
                    b.Navigation("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.MeasuredVariableModifier", b =>
                {
                    b.Navigation("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.MWO", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.MWOItem", b =>
                {
                    b.Navigation("FisnishPipingItems");

                    b.Navigation("PurchaseOrderMWOItems");

                    b.Navigation("StartPipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.MWOType", b =>
                {
                    b.Navigation("MWOs");
                });

            modelBuilder.Entity("CPTool.Entities.Nozzle", b =>
                {
                    b.Navigation("FinishPipingItems");

                    b.Navigation("StartPipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PaintingItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipeAccesory", b =>
                {
                    b.Navigation("Nozzles");
                });

            modelBuilder.Entity("CPTool.Entities.PipeClass", b =>
                {
                    b.Navigation("Nozzles");

                    b.Navigation("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipeDiameter", b =>
                {
                    b.Navigation("Nozzles");

                    b.Navigation("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PipingItem", b =>
                {
                    b.Navigation("MWOItems");

                    b.Navigation("Nozzles");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Entities.ProcessCondition", b =>
                {
                    b.Navigation("EquipmentItems");

                    b.Navigation("InstrumentItems");

                    b.Navigation("PipeAccesorys");
                });

            modelBuilder.Entity("CPTool.Entities.ProcessFluid", b =>
                {
                    b.Navigation("EquipmentItems");

                    b.Navigation("InstrumentItems");

                    b.Navigation("PipingItems");
                });

            modelBuilder.Entity("CPTool.Entities.PurchaseOrder", b =>
                {
                    b.Navigation("DownPayments");

                    b.Navigation("PurchaseOrderMWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Readout", b =>
                {
                    b.Navigation("InstrumentItems");
                });

            modelBuilder.Entity("CPTool.Entities.StructuralItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Supplier", b =>
                {
                    b.Navigation("BrandSuppliers");

                    b.Navigation("EquipmentItems");

                    b.Navigation("InstrumentItems");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLD", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxCodeLP", b =>
                {
                    b.Navigation("Suppliers");
                });

            modelBuilder.Entity("CPTool.Entities.TaxesItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.TestingItem", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.Unit", b =>
                {
                    b.Navigation("Densitys");

                    b.Navigation("ElevationChangePipeAccesorys");

                    b.Navigation("EnthalpyFlows");

                    b.Navigation("FrictionDropPressurePipeAccesorys");

                    b.Navigation("FrictionPipeAccesorys");

                    b.Navigation("IDs");

                    b.Navigation("LevelInletPipeAccesorys");

                    b.Navigation("LevelOutletPipeAccesorys");

                    b.Navigation("MassFlows");

                    b.Navigation("ODs");

                    b.Navigation("OverallDropPressurePipeAccesorys");

                    b.Navigation("Pressures");

                    b.Navigation("ReynoldPipeAccesorys");

                    b.Navigation("SpecificCps");

                    b.Navigation("SpecificEnthalpys");

                    b.Navigation("Temperatures");

                    b.Navigation("ThermalConductivitys");

                    b.Navigation("Thicknesss");

                    b.Navigation("Viscositys");

                    b.Navigation("VolumetricFlows");
                });

            modelBuilder.Entity("CPTool.Entities.UnitaryBasePrize", b =>
                {
                    b.Navigation("MWOItems");
                });

            modelBuilder.Entity("CPTool.Entities.VendorCode", b =>
                {
                    b.Navigation("Suppliers");
                });
#pragma warning restore 612, 618
        }
    }
}
