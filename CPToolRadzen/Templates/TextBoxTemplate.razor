<div style=@UISettings.RowRem class="row">
    <div class=@UISettings.ColClassLabel>
        <RadzenLabel Text="@Label" Style=@UISettings.StyleBoxWidth100 class=@UISettings.ClassBox />
    </div>
    <div class=@UISettings.ColClassValue>
        @if (Rows == 1)
        {
            <RadzenTextBox Style=@UISettings.StyleBoxWidth100 @bind-Value="@Value" Change=ValueChanged Disabled=@Disabled Name="TextBox"
                       @oninput=@OnChange
                       class=@UISettings.ClassBox />
        }
        else
        {
            <RadzenTextArea @bind-Value="@Value" Change=OnChange Disabled=@Disabled Name="TextBox" Rows="@Rows" Style=@UISettings.StyleBoxWidth100
                         class=@UISettings.ClassBox />
        }
      
       
    </div>
</div>

@code {
    async Task OnChange(string sr)
    {
        Value = sr;
        await ValueChanged.InvokeAsync(Value);
    }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string Value { get; set; }
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    async Task OnChange(ChangeEventArgs arg)
    {
        Value = arg.Value.ToString();
        await ValueChanged.InvokeAsync(Value);
    }

    [Parameter]
    public List<string> StringsToCompare { get; set; } 

    public bool Any => StringsToCompare == null ? false : true;
    [Parameter]
    public bool Required { get; set; } = false;
    [Parameter]
    public bool Disabled { get; set; } = false;

   
    [Parameter]
    public int Rows { get; set; } = 1;
 
}
