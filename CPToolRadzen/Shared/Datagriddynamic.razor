@page "/datagrid-dynamic"
@using System.Linq.Dynamic.Core

<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    DataGrid Selected <strong>@(Selected==null?"":Selected.FirstOrDefault().Value.ToString())</strong> data support

</RadzenText>
<RadzenText TextStyle="TextStyle.Body1" Class="my-4">
    Sometimes your data comes from external API and you don't have a C# model for it. This demo shows how to implement such a scenario.
</RadzenText>

<RadzenDataGrid Data="@data" TItem="IDictionary<string, object>" RowClick=OnRowClick
                AllowFiltering="true" FilterMode="FilterMode.SimpleWithMenu" AllowPaging="true" AllowSorting="true">
    <Columns>
        @foreach (var column in columns)
        {
            <RadzenDataGridColumn TItem="IDictionary<string, object>" Title="@column.Key" Type="column.Value"
                              Property="@GetColumnPropertyExpression(column.Key, column.Value)">
                <Template>
                    @context[@column.Key]
                </Template>
            </RadzenDataGridColumn>
        }
    </Columns>
</RadzenDataGrid>
@code {
    public IEnumerable<IDictionary<string, object>> data { get; set; }

    public IDictionary<string, Type> columns { get; set; }
    [Parameter]
    public IDictionary<string, object> Selected { get; set; }
    [Parameter]
    public EventCallback<IDictionary<string, object>> SelectedChanged { get; set; }
    protected async Task OnRowClick(DataGridRowMouseEventArgs<IDictionary<string, object>> args)
    {
        Selected = args.Data;
       
        await SelectedChanged.InvokeAsync(Selected);
    }
    public string GetColumnPropertyExpression(string name, Type type)
    {
        var expression = $@"it[""{name}""].ToString()";
        return type == typeof(int) ? $"int.Parse({expression})" : expression;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        columns = new Dictionary<string, Type>()
        {
            { "EmployeeID", typeof(int) },
            { "FirstName", typeof(string) },
            { "LastName", typeof(string) },
        };

        data = Enumerable.Range(0, 100).Select(i =>
        {
            var row = new Dictionary<string, object>();

            foreach (var column in columns)
            {
                row.Add(column.Key, column.Value == typeof(int) ? i : $"{column.Key}{i}");
            }

            return row;
        });
    }
}
